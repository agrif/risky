INCLUDE memory.x

/* memory.x should include a definition like:

MEMORY
{
    // NOTE 1 K = 1 KiB = 1024 bytes
    ROM (xr) : ORIGIN = 0x00000000, LENGTH = 64K
    RAM (rw) : ORIGIN = 0x10000000, LENGTH = 32K
}

REGION_ALIAS("REGION_TEXT", ROM);
REGION_ALIAS("REGION_RODATA", ROM);
REGION_ALIAS("REGION_DATA", RAM);
REGION_ALIAS("REGION_BSS", RAM);
REGION_ALIAS("REGION_HEAP", RAM);
REGION_ALIAS("REGION_STACK", RAM);

this can be generated by the memory-x subcommand.
*/

EXTERN(_reset_vector);
ENTRY(_reset_vector);

PROVIDE(_stext = ORIGIN(REGION_TEXT));
PROVIDE(_stack_start = ORIGIN(REGION_STACK) + LENGTH(REGION_STACK));
PROVIDE(_heap_size = 0);

SECTIONS
{
    .text.dummy (NOLOAD) :
    {
        /* this section helps make _stext work */
        . = ABSOLUTE(_stext);
    } > REGION_TEXT

    .text _stext :
    {
        __sheader = .;
        /* header must go first */
        KEEP(*(.header .header.*));
        . = ALIGN(4);
        __eheader = .;

        __stext = .;
        *(.text .text.*);

        . = ALIGN(4);
    } > REGION_TEXT

    . = ALIGN(4);
    __etext = .;

    .rodata : ALIGN(4)
    {
        . = ALIGN(4);
        __srodata = .;
        *(.srodata .srodata.*);
        *(.rodata .rodata.*);

        . = ALIGN(4);
    } > REGION_RODATA

    . = ALIGN(4);
    __erodata = .;

    .data : ALIGN(4)
    {
        . = ALIGN(4);
        __sdata = .;
        *(.data .data.*);

        /* linker relaxation default */
        PROVIDE(__global_pointer$ = . + 0x800);
        *(.sdata .sdata.*);

        . = ALIGN(4);
    } > REGION_DATA AT>REGION_RODATA

    . = ALIGN(4);
    __edata = .;

    __sidata = LOADADDR(.data);

    .bss (NOLOAD) : ALIGN(4)
    {
        . = ALIGN(4);
        __sbss = .;
        *(.sbss .sbss.*);
        *(.bss .bss.*);
        *(COMMON);

        . = ALIGN(4);
    } > REGION_BSS

    . = ALIGN(4);
    __ebss = .;

    .uninit (NOLOAD) : ALIGN(4)
    {
        . = ALIGN(4);
        __suninit = .;
        *(.uninit .uninit.*);

        . = ALIGN(4);
    } > REGION_BSS

    . = ALIGN(4);
    __euninit = .;

    .heap (NOLOAD) : ALIGN(4)
    {
        . = ALIGN(4);
        __sheap = .;
        . += _heap_size;
        . = ALIGN(4);
    } > REGION_HEAP

    . = ALIGN(4);
    __eheap = .;

    .stack (NOLOAD) : ALIGN(4)
    {
        . = ALIGN(4);
        __estack = .;
        . = ABSOLUTE(_stack_start);
        __sstack = .;
    } > REGION_STACK
}

/* some sanity checks */

ASSERT(_stext % 4 == 0, "
BUG(link.x): _stext is not 4-byte aligned");

ASSERT(_reset_vector == _stext, "
BUG(link.x): reset vector not at address _stext");

ASSERT(__sdata % 4 == 0 && __edata % 4 == 0, "
BUG(link.x): .data is not 4-byte aligned");

ASSERT(__sidata % 4 == 0, "
BUG(link.x): the LMA of .data is not 4-byte aligned");

ASSERT(__sbss % 4 == 0 && __ebss % 4 == 0, "
BUG(link.x): .bss is not 4-byte aligned");

ASSERT(__sheap % 4 == 0 && __eheap % 4 == 0, "
ERROR(link.x): .heap is not 4-byte aligned");

ASSERT(_stack_start % 4 == 0 && __estack % 4 == 0, "
ERROR(link.x): .stack is not 4-byte aligned");
